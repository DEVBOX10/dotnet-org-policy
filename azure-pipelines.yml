# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- main

pool:
  vmImage: windows-latest

variables:
  buildConfiguration: Release
  sln: $(Build.Repository.LocalPath)\src\Microsoft.DotnetOrg.Policies.sln
  outDir: $(Build.ArtifactStagingDirectory)\
  policop: $(Pipeline.Workspace)\drop\policop.exe
  netversion: 5.x

jobs:
- job: Build
  steps:
  - task: UseDotNet@2
    inputs:
      packageType: 'sdk'
      version: '$(netversion)'
  - task: DotNetCoreCLI@2
    inputs:
      command: 'build'
      projects: '$(sln)'
      arguments: '/p:OutDir=$(outDir)'
  - task: PublishBuildArtifacts@1
    condition: eq(variables['system.pullrequest.isfork'], false)
- job: Validate
  dependsOn: Build
  timeoutInMinutes: 240
  condition: |
    and(
      eq(variables['Build.DefinitionName'], 'dotnet-org-policy-check-run'),
      or(
        eq(variables['Build.Reason'], 'Schedule'),
        eq(variables['Build.Reason'], 'Manual')
      )
    )
  strategy:
    matrix:
      aspnet:
        orgName: aspnet
        checkArgs: --policy-repo aspnet/org-policy-violations --update-issues
      dotnet:
        orgName: dotnet
        checkArgs: --policy-repo dotnet/org-policy-violations --update-issues --assign-issues
      mono:
        orgName: mono
        checkArgs: --policy-repo dotnet/mono-policy-violations --update-issues
      nuget:
        orgName: nuget
        checkArgs: --policy-repo dotnet/nuget-policy-violations --update-issues
      xamarin:
        orgName: xamarin
        checkArgs: --policy-repo xamarin/org-policy-violations --update-issues
  steps:
  - checkout: none
  - task: UseDotNet@2
    inputs:
      packageType: 'runtime'
      version: '$(netversion)'
  - task: DownloadPipelineArtifact@2
  - script: $(policop) cache-org --org $(orgName) --with-ms-links
    displayName: Cache org
    env:
      GITHUBTOKEN: $(GitHubToken)
      OSPOTOKEN: $(OspoToken)
  - script: $(policop) check --org $(orgName) $(checkArgs) -o "$(outDir)\$(orgName).csv"
    displayName: Check org
    env:
      GITHUBTOKEN: $(GitHubToken)
  - script: $(policop) cache-export -o $(outDir)
    displayName: Export org
  - script: $(policop) cache-clear -f
    displayName: Clear org
  - task: PublishBuildArtifacts@1
